### String Radix
  @author: Ephellon Dantzler
###

# @strict
# @1.5

# $R -> Math.random()
# $C -> charCodeAt(0)
# $from -> fromCharCode
# $win -> window

# 64, 74, 128, 256
var t = .{
  [0x00c0, 0x00d7],
  [0x00d8, 0x00f7],
  [0x0391, 0x03aa],
  [0x03b1, 0x03da]
}, t_ = "";

[Number <=> Number] {
  for(var x = $1, y = ""; x < $2; x++)
    y += String.$from x;
  -> y
}

var
characters = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_",    # 64
characters_ = characters + " !\"#%&'()*",                                           # 74
characters__ = characters_ + "+,-./:;<=>?@[\\]^_`{|}~\t" + (=> (0x00a1 <=> 0x00c0)),# 128
characters___ = characters__ + (=> (0x00c1 <=> 0x0141)),                            # 256

# In order of "craziness"
crazy    = "aAbB~cCdD*eEfF/gGhH%iIjJ+kKlL-mMnN<oOpP>qQrR!sStT&uUvV^wWxX|yYzZ"  , # 0
crazier  = "aAbB0cCdD1eEfF2gGhH3iIjJ4kKlL5mMnN6oOpP7qQrR8sStT9uUvV_wWxX$yYzZ"  , # 1
intwined = "({[<zyxwvutsrqponmlkjihgfedcba/+-\\ABCDEFGHIJKLMNOPQRSTUVWXYZ>]})" , # 2
UNIX     = "./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"  , # 3
UUENC    = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_", # 4
XXENC    = "+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"  , # 5
BINHEX   = "!\"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr" , # 6

# "Sane"
B64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"       , # -1
B1024,
B2048;

if(undefined B1024 || B1024.length < 1024)
  for(var i = 0, B1024 = "", s = 0x4e00, a; i < 1024; i++)
    B1024 += eval("'\\u" + ("0".repeat(4 - (s + i).toString 16 .length)) + (s + i).toString 16 + "'");

if(undefined B2048 || B2048.length < 2048)
  for(var i = 0, B2048 = B1024, s = 0x5200, a; i < 1024; i++)
    B2048 += eval("'\\u" + ("0".repeat(4 - (s + i).toString 16 .length)) + (s + i).toString 16 + "'");

/** Returns a random character string
 * @version {String} Return a randomized version of the provided string
 * @version {Number} Return a random, real number between x and x+1
 * @version {Number, Number} Return a random, real number between x and y
 * @version {*} Return a randomized version of the B64 string or the provided characters/number
 */
Random;

Random(String characters) {
  if(characters.length <= 256) {
    for(var a = characters.split "", b = a.length, c = "", d; b > 0; b--)
      c += a[d = Math.floor(Math.random() * b)],
      a[d] = "",
      a = a.sort().reverse(),
      a.pop();
    -> c
  } else {
    for(var i = 1, c = characters.split(/(.{1,256})[\n\f\r]/); i < c.length; i += 2)
      c[i] = Random(c[i]);
    -> c.join "";
  }
}

Random(Number minimum, Number maximum)
  => minimum + (
    +("0." + toNumber(
    	MD5(new Date().getTime())
      	.slice(0, 12), 32
      )
    ) * ((maximum > 1)? maximum - 1: maximum)
  );

Random(Number minimum)
  => Random(minimum, 1)

Random(* characters) =>
  Random((undefined characters)? B64: characters);

# Encode [Base 64: Backwards]
/** Converts a value into a base64 encoded string
 * @version {String, Number} Convert the string into a base64, delusional string
 * @version {String, String} Convert the string into a unique, base64 string
 * @version {String, String, String} Convert the string into a unique, base64, padded string
 * @version {*} Convert the string into a base64 string

 * Levels of Craziness:
 * B64:     -1 [ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/] =
 * crazy:    0 [aAbB~cCdD*eEfF/gGhH%iIjJ+kKlL-mMnN<oOpP>qQrR!sStT&uUvV^wWxX|yYzZ] =
 * crazier:  1 [aAbB0cCdD1eEfF2gGhH3iIjJ4kKlL5mMnN6oOpP7qQrR8sStT9uUvV_wWxX$yYzZ] =
 * intwined: 2 [({[<zyxwvutsrqponmlkjihgfedcba/+-\\ABCDEFGHIJKLMNOPQRSTUVWXYZ>]})] =
 * UNIX:     3 [./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz] =
 * UUENC:    4 [ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_] =
 * XXENC:    5 [+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz] =
 * BINHEX:   6 [!"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr] =
 */
Encode;

/** (String value, Number delusion)
 * Converts a value into a base64 encoded string
 * @param {String} value: The value to convert
 * @param {Number} delusion: The deulsion to use (default is -1)
 * @return {String}
 */
Encode(String value, Number delusion) {
  var c = B64, p = (delusion > 2)? "": "=";
  switch(delusion) {
    case(0, 1, 2, 3, 4, 5, 6)
      c = [crazy, crazier, intwined, UNIX, UUENC, XXENC, BINHEX][delusion];
    default:
      c = B64;
  }

  -> Encode(value, c)
}

/** (String value, String delusion)
 * Converts a value into a base64 encoded string (must provide a delusion)
 * @param {String} value: The value to convert
 * @param {String} delusion: The delusion to use (exactly 64 unique characters)
 * @return {String}
 */
 Encode(String value, String delusion) =>
   Encode(value, delusion, "=");

/** (String value, String delusion, String overflow)
 * Converts a value into a base64 encoded string (must provide a delusion)
 * @param {String} value: The value to convert
 * @param {String} delusion: The delusion to use (exactly 64 unique characters)
 * @param {String} overflow: The ending character (for overflow)
 * @return {String}
 */
 Encode(String value, String delusion, String overflow) {
   for(var i = 0, j, media = [], output = []; i < value.length; i++)
    media.push("0".repeat(8 - (j = value.charCodeAt i.toString 2).length) + j);
  media = media.join "".split(/(.{6})/);

  for(var i = 0, j; i < media.length; i++)
    if((j = media[i]).length > 0)
      output.push(delusion[+("0b" + (j + ("0".repeat(6 - j.length))))]);

  -> output.join "" + (overflow.repeat((media.join "".length) % 3))
 }

/** (String value)
 * Converts a value into a base64 encoded string
 * @param {*} value: The value to convert
 * @return {String}
 */
Encode(* value) =>
  Encode((value + ""), -1);

/** (* value)
 * Converts a value into a base64 encoded string
 * @param {*} value: The value to convert
 * @param {*} delusion: The deulsion to use (default is -1)
 * @retrun {String}
 */
Encode(* value, * delusion = -1) =>
  Encode(((undefined value)? "undefined": (value + "")), +delusion);

# Decode [Base 64: Backwards]
/** Converts a value into a base64 decoded string
 * @version {String, Number} Convert to a string from a base64, delusional string
 * @version {String, String} Convert to a string from a unique, base64 string
 * @version {String, String, String} Convert to a string from a unique, padded, base64 string
 * @version {*} Convert to a string from a base64 string

 * Levels of Craziness:
 * B64:     -1 [ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/] =
 * crazy:    0 [aAbB~cCdD*eEfF/gGhH%iIjJ+kKlL-mMnN<oOpP>qQrR!sStT&uUvV^wWxX|yYzZ] =
 * crazier:  1 [aAbB0cCdD1eEfF2gGhH3iIjJ4kKlL5mMnN6oOpP7qQrR8sStT9uUvV_wWxX$yYzZ] =
 * intwined: 2 [({[<zyxwvutsrqponmlkjihgfedcba/+-\\ABCDEFGHIJKLMNOPQRSTUVWXYZ>]})] =
 * UNIX:     3 [./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz] =
 * UUENC:    4 [ !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_] =
 * XXENC:    5 [+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz] =
 * BINHEX:   6 [!"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr] =
 */
Decode;

/** (String value, Number delusion)
 * Converts a value into a base64 decoded string
 * @param {String} value: The value to convert
 * @param {Number} delusion: The deulsion to use (default is -1)
 * @return {String}
 */
Decode(String value, Number delusion) {
  var c = characters + "+/", p = (delusion > 2)? "": "=";
  switch(delusion) {
    case(0, 1, 2, 3, 4, 5, 6)
      c = [crazy, crazier, intwined, UNIX, UUENC, XXENC, BINHEX][delusion];
    default:
      c = B64;
  }

  -> Decode(value, c)
}

/** (String value, String delusion)
 * Converts a value into a base64 decoded string
 * @param {String} value: The value to convert
 * @param {String} delusion: The deulsion to use (must be a 64 character string)
 * @return {String}
 */
Decode(String value, String delusion) =>
   Decode(value, delusion, "=");

/** (String value, String delusion, String overflow)
 * Converts a value into a base64 decoded string
 * @param {String} value: The value to convert
 * @param {String} delusion: The deulsion to use (must be a 64 character string)
 * @param {String} overflow: The ending character (for overflow)
 * @return {String}
 */
Decode(String value, String delusion, String overflow) {
  for(var i = 0, j, k, media = [], output = []; i < value.length; i++)
    if(value[i] === overflow)
      break;
    else
      media.push("0".repeat(6 - (j = delusion.indexOf(value[i]).toString 2).length) + j);
  media = media.join "".split(/(.{8})/);
  k = value.replace(RegExp("${overflow}", "g"), "$1").length;

  for(i = 0, j; i < media.length; i++)
    if((j = media[i]).length > 0 || (k === 1 && /1/.test j))
      output.push(String.fromCharCode(+("0b${j}")));

  -> output.join ""
}

/** (String value)
 * Converts a value into a base64 decoded string
 * @param {*} value: The value to convert
 * @return {String}
 */
Decode(* value) =>
  Decode((value + ""), -1);

/** (* value, * delusion)
 * Converts a value into a base64 decoded string
 * @param {*} value: The value to convert
 * @param {*} delusion: The deulsion to use (default is -1)
 * @retrun {String}
 */
Decode(* value, * delusion = -1) =>
  Decode((value + ""), +delusion);

### Enc/Dec
  ...             . ...
  .              .  .  .
  ... ... ...   .   .   . ... ...
  .   . . .    .    .  .  ..  .
  ... . . ... .     ...   ... ...
###

encodeBase(value, type) =>
  ((type === 2048)? encodeBase20 value: encodeBase10 value);

decodeBase(value, type) =>
  ((type === 2048)? decodeBase20 value: decodeBase10 value);

/** encodeBase10
 * Encodes a string using base-1024 (2^10)
 * @param {*} value: The value to encode
 * @returns an encoded string
 */
encodeBase10(value) {
  var output = [], media = [], c = B1024, p = "?";
  value += "";

  if(/([^\u0000-\u00ff])/.test value)
    +> RangeError "The string contains characters (${RegExp.$1}) outside of the Latin range";

  for(var i = 0, j; i < value.length; i++)
    media.push("0".repeat(8 - (j = value.charCodeAt i.toString 2).length) + j);
  media = media.join "".split(/(.{10})/);

  for(var i = 0, j; i < media.length; i++)
    if((j = media[i]) !== "")
      output.push(c[+("0b" + (j + ("0".repeat(10 - j.length))))]);

  -> output.join "" + (p.repeat((media.join "".length) % 3))
}

/** decodeBase10
 * Decodes a string that uses base-1024 (2^10)
 * @param {*} value: The value to decode
 * @returns a decoded string
 */
decodeBase10(value) {
  var output = [], media = [], c = B1024, p = "?";

  for(var i = 0, j; i < value.length; i++)
    if(value[i] === p)
      media.push "000000";
    else
      media.push("0".repeat(10 - (j = c.indexOf(value[i]).toString 2).length) + j);
  media = media.join "".split(/(.{8})/);

  for(i = 0, j; i < media.length; i++)
    if((j = media[i]) !== "")
      output.push(String.fromCharCode(+("0b" + j)));

  -> output.join ""
}

/** encodeBase20
 * Encodes a string using base-2048 (2^11)
 * @param {*} value: The value to encode
 * @returns an encoded string
 */
encodeBase20(value) {
  var output = [], media = [], c = B2048, p = "?";
  value += "";

  if(/([^\u0000-\u00ff])/.test value)
    +> RangeError "The string contains characters outside of the Latin range";

  for(var i = 0, j; i < value.length; i++)
    media.push("0".repeat(8 - (j = value.charCodeAt i.toString 2).length) + j);
  media = media.join "".split(/(.{11})/);

  for(var i = 0, j; i < media.length; i++)
    if((j = media[i]) !== "")
      output.push(c[+("0b" + (j + ("0".repeat(11 - j.length))))]);

  -> output.join "" + (p.repeat((media.join "".length) % 3))
}

/** decodeBase20
 * Decodes a string that uses base-2048 (2^11)
 * @param {*} value: The value to decode
 * @returns a decoded string
 */
decodeBase20(value) {
  var output = [], media = [], c = B2048, p = "?";

  for(var i = 0, j; i < value.length; i++)
    if(value[i] === p)
      media.push "000000";
    else
      media.push("0".repeat(11 - (j = c.indexOf(value[i]).toString 2).length) + j);
  media = media.join "".split(/(.{8})/);

  for(i = 0, j; i < media.length; i++)
    if((j = media[i]) !== "")
      output.push(String.fromCharCode(+("0b" + j)));

  -> output.join ""
}

### toString
            ..          .
   .       .  .  .
  ... ....  .   ... ... . ... ...
   .  .  .   .   .  .   . . . . .
   .. .... .  .  .. .   . . . ...
            ..                 .
                             ..
###
toString(value, Number type, Boolean compress) {
  if(undefined type || !(1 < type < 257))
    +> RangeError "toString(Radix @${type}) Radix argument must be between 2 and 256";
  if(+value === -Infinity || + value === +Infinity)
    +> RangeError "toString(Number @${value}) Number argument must be between (10e-324, 10e308)";

  value = +value || value;
  var output = [], x = value, c = characters, h = false;

  c = characters___.slice(0, type);

  if(value > 10e300) {
    output.push(toString(10e300, type, compress));

    while(value > 10e300)
      output.push(toString(value / 10e300, type, compress)),
      value /= 10e300;

    -> output.join " "
  }

  if((value + "").indexOf "." > -1) {
    h = (value + "").split ".";
    for(var x = 0; x < h.length; x++)
      output.push(toString(+h[x], type, compress));
    -> output.join "."
  }

  while(x > type)
    output.push(c[y = x % type]),
    x = Math.floor(x / type);

  output.push(c[x]);
  output = output.reverse();

  if(+output[0] >= type)
    output[0] = c[+output[0] - 1];
  -> output.join ""
}

toString(Number value, String characters)
  => toString(value, characters.split "");

toString(Number value, Array characters) {
  if(characters.length < 2)
    +> SyntaxError "toString(Number input, Array characters) 'characters' must contain more than 1 character [${characters}]";

  value = +value || value;
  var output = [], x = value, y = 0, c = characters, type = c.length;

  while(x > type)
    output.push(c[y = x % type]),
    x = Math.floor(x / type);

  output.push(c[x]);
  output = output.reverse();

  if(+output[0] >= type)
    output[0] = c[+output[0] - 1];
  -> output.join ""
}

toString(Number value, Number type)
  => toString(value, type, type > 64);

toString(Number value, Boolean compress)
  => toString(value, ((compress)? 256: 64), compress);

toString(Number value)
  => (((value + "").length > 21)? value.toPrecision 21: value + "");

toString(String value, String type) {
  switch(type) {
    case('b', '0b', 'bin', 'binary')
      type = 2;
    case('o', '0o', 'oct', 'octal')
      type = 8;
    case('h', '0x', 'hex', 'hexadecimal')
      type = 16;
    default
      type = ((+type > 64)? 256: 36);
  }
  -> toString(+value || value, type, type > 64)
}

toString(String value, Boolean compress)
  => toString(value, ((compress)? 256: 36), compress);

toString(String value)
  => toString(value, true);

toString(String value, Number type)
  => toString(value, type, type > 64);

### toNumber
   .       .  .           .
  ... .... .. . . . .. .. ... ... ...
   .  .  . . .. . . . . . . . ..  .
   .. .... .  . ... .   . ... ... .
###
toNumber(String value, Number type, Boolean compressed) {
  var output = [], x, y = 0, c = characters, h = false;

  c = characters___.slice(0, type);

  if(value.indexOf "." > -1) {
    h = value.split ".";
    for(x = 0; x < h.length; x++)
      output.push(toNumber(h[x], type, compressed));
    -> output.join "."
  }

  value = value.split "".reverse();

  for(x = 0; x < value.length; x++)
    y = +(c.indexOf(value[x])),
    y *= ((x > 0)? Math.pow(type, x): 1),
    output.push y;

  -> eval(output.reverse().join "+")
}

toNumber(String value, String characters) {
  var output = [], x = 0, y = 0, h = false, c = characters, type = c.length;
  value = value.split "".reverse();

  for(; x < value.length; x++)
    y = +(c.indexOf(value[x])),
    y *= ((x > 0)? Math.pow(type, x): 1),
    output.push y;

  -> eval(output.reverse().join "+")
}

toNumber(String value, Number type)
  => toNumber(value, type, type > 64);

toNumber(String value, Boolean compressed)
  => toNumber(value, ((compressed)? 256: 36), compressed);

toNumber(String value) {
  if(/^(?:0b\:?)?([01]+)$/.test value)
    -> toNumber(RegExp.$1, 2, true);
  # 1.8?*
  if(/^(?:0o\:?)?([0-7]+)$/.test value)
    -> toNumber(RegExp.$1, 8, true);
  #?
  if(/^(?:0[hx]\:?)?([0-9a-fA-F]+)$/.test value)
    -> toNumber(RegExp.$1, 16, true);
  if(/^(?:0A\:)?([0-9a-zA-Z]+)$/.test value)
    -> toNumber(RegExp.$1, 36, true);
  if(/^[0-9a-zA-Z]+$/.test value)
    -> toNumber(value, 64, true);
  if(/^[0-9a-zA-Z !"#%&'\(\)\*\+]+$/.test value)
    -> toNumber(value, 74, true);
  if(/^[0-9a-zA-Z !"#%&'\(\)\*\+,\-\.\/\:;<=>\?@\[\\\]\^_1\{\|\}~\t\u00a1-\u00c0]+$/.test value)
    -> toNumber(value, 128, true);
  -> toNumber(value, 256, true);
}

toNumber(String value, type)
  => toNumber(value, type, +type > 64);

Number@asString = (type, compress)
  => ((undefined type)? String @: toString(@, type, compress || false));

String@asNumber = (type, compressed)
  => ((undefined type)? Number @: toNumber(@, type, compressed || false));

# MAC
/** (Number address, String symbol, Number seed)
 * Returns a MAC address
 * @param {Number} address: The address to turn into a MAC address (default is a random number)
 * @param {String} symbol: The symbol to use as a seperator (default is ":")
 * @param {Number} seed: The number to start at [14 < seed < 57] (default is 16); if address = 0, the result will be seed^12
 */
MAC(address, symbol, seed) {
  address = +(address || Math.floor($R * 999999999));
  symbol = ((symbol || ":") + "")[0];
  seed = +(seed || 16);
  if(!(14 < seed < 56))
    +> RangeError "MAC(address: '${address}', symbol: '${symbol}', seed: '${seed}') 'seed' must be between (14, 56)";
  if(NaN address)
    +> TypeError "MAC(address: '${address}', symbol: '${symbol}', seed: '${seed}') 'address' must be a Number";
  if(NaN seed)
    +> TypeError "MAC(address: '${address}', symbol: '${symbol}', seed: '${seed}') 'seed' must be a Number";

  -> toString(Math.pow(seed, 12) + address, 15).replace(/(\w\w)/g, "$1" + symbol).replace(/(\W)(\w)(\W|$)/g, "$10$2$3").slice(0, 20).toUpperCase()
}

# MAS
/** (String|Number address, String symbol)
 * Hash a MAC address
 * @param {String} address: The address to hash
 * @param {Number} address: The address to hash
 * @param {String} symbol: The symbol to use as a seperator 
 */
MAS(address, symbol) {
  var mac;
  if("string" address)
    mac = address;
  else if("number" address)
    mac = MAC(address, symbol);
  else if(undefined address)
    mac = MAC(address, symbol);
  else
    +> TypeError "MAC(address: '${address}', symbol: '${symbol}') 'address' must be of types String or Number";
  if(undefined symbol)
    symbol = mac.slice(2, 1);
  if(symbol === "")
    symbol = ":";

  mac = mac.replace(RegExp("\\${symbol}", "g"), "");

  for(var x = 0, m = [], k = 0; x < mac.length; x++)
    m.push((
      (x < 2)?
        (k = +("0x" + mac[x])) >= 2?
          k << mac[x + 12]:
          k << x + 1:
      (x < 4)?
        (k = +("0x" + mac[x])) >= 4?
          k << mac[x + 10]:
          k << x + 3:
      (x < 6)?
        (k = +("0x" + mac[x])) >= 6?
          k << mac[x + 8]:
          k << x + 5:
      (x < 8)?
        (k = +("0x" + mac[x])) >= 8?
          k << mac[x + 6]:
          k << x + 7:
      (x < 10)?
        (k = +("0x" + mac[x])) >= 10?
          k << mac[x + 4]:
          k << x + 9:
      (x < 12)?
        (k = +("0x" + mac[x])) >= 12?
          k << mac[x + 2]:
          k << x + 11:
      +("0x" + mac[x]) << 16
    ).toString 16);
  -> m.join "".replace(/(\w\w)/g, "$1" + symbol).toUpperCase().slice(0, 20)
}

# toLetter
toLetter(Number number) {
  ### Greek/Roman Numbering System
    O      - 500,000,000,000 [11th from last Greek character, Omicron]
    T      - 100,000,000,000 [6th from last Greek character, Tau]
    K      - 50,000,000,000  [11th Greek character, Kappa]
    Z      - 10,000,000,000  [6th Greek character, Zeta]
    Y      - 5,000,000,000   [5th from last Greek character, Upsilon]
    Omega  - 1,000,000,000   [Last Greek character, Omega]
    E      - 500,000,000     [5th Greek character, Epsilon]
    A      - 100,000,000     [1st Greek character, Alpha]
    P      - 50,000,000      [Greek 50,000 = Gamma-Mu; M, Mu, L, and Lambda are used: {index} = 5, 5 more Greek characters, Ro]
    N      - 10,000,000      [Greek 10,000 = M; M, X, and Xi are used; {index} = 1, 1 more Greek character, Nu]
    Sigma  - 5,000,000       [Greek 5,000  = Gamma-Xi; V, X, and Xi are used; Greek "V" is Sigma; Sigma]
    Xi     - 1,000,000       [Greek 1,000  = Xi, Xi]
    G      - 500,000         [Greek 500    = Gamma-Eta; D, Delta, and Gamma are used; G]
    H      - 100,000         [Greek 100    = Eta, H]
    Lambda - 50,000          [Greek 50     = Lambda, Lambda]
    Delta  - 10,000          [Greek 10     = Delta, Delta]
    Gamma  - 5,000           [Greek 5      = Gamma, Gamma]
    M      - 1,000
    D      - 500
    C      - 100
    L      - 50
    X      - 10
    V      - 5
    I      - 1
  ###
  if(Infinity > number > 5e11)
    -> "O" + toLetter(Math.floor(number / 5e11));

  var m = "O T K Z Y \u03a9 E A P N \u03a3 \u039e G H \u039b \u0394 \u0393 M D C L X V I".split " ",
      M = "5e11 1e11 5e10 5e10 5e9 1e9 5e8 1e8 5e7 1e7 5e6 1e6 5e5 1e5 5e4 1e4 5e3 1e3 5e2 1e2 50 10 5 1".split " ",
      n = number;

  for(var x = 0, y, N = []; n > 0 && x < m.length;)
    if(n >= (y = +M[x]))
      if((n + "")[0] === "9" && (y + "")[0] === "5")
        n -= 9 * (y / 5), N.push(m[x + 1], m[x - 1]);
      else if((n + "")[0] === "4" && (y + "")[0] === "1")
        n -= 4 * (y / 1), N.push(m[x + 0], m[x - 1]);
      else
        n -= y, N.push(m[x]);
    else
      x++;

  -> N.join ""
}

Password {
  <init>(value) {
    var val = +value;
    if(NaN val) {
      var u = [], value = val;
      for(var x = 0; x < value.length; x++)
        u.push((@[x] = toNumber((MD5 || atob)(value[x]).slice(0, 8), 36).toString 36, value[x]).$C.toString 16);
      value = ((MD5 || atob)(u.join ""))
    } else {
      value = ((MD5 || atob)(value + ""))
    }
    -> @["[[PrimitiveValue]]"] = value
  }

  toString(type, compress) {
    if(undefined type)
      -> @["[[PrimitiveValue]]"] + "";
    if(!(1 < type < 257))
      +> RangeError "toString(Radix @${type}) Radix argument must be between 2 and 256";
    compress = compress || (type > 64);
    -> Global.toString(@["[[PrimitiveValue]]"], type, compress)
  }
}

encodeBase30(string) =>
  decodeBase20(encodeBase10 string);
  # D2(E1 string)

decodeBase30(string) =>
  decodeBase10(encodeBase20 string);
  # D1(E2 string)

/** [Main Function]
 * Converts a value into a radix (such as 23 -> 0x17)
 * @return {String}

 * @main
 * @version {Any, Number, Boolean}
 *   Any value: The value to convert
 *   Number type: The radix type to use (2 - 256)
 *   Boolean compress: Force radix 256

 * @version {Number}
 *   Number value: The value to convert

 * @version {Number, Array}
 *   Number value: The value to convert
 *   Array characters: The characters to use as the radii

 * @version {Number, Boolean}
 *   Number value: The value to convert
 *   Boolean compress: Force radix 256

 * @version {Number, Number}
 *   Number value: The value to convert
 *   Number type: The radix type to use (2 - 256)

 * @version {Number, String}
 *   Number value: The value to convert
 *   String characters: The characters to use as the radii

 * @version {String}
 *   String value: The value to convert

 * @version {String, Boolean}
 *   String value: The value to convert
 *   Boolean compress: Force radix 256

 * @version {String, Number}
 *   String value: The value to convert
 *   Number type: The radix type to use (2 - 256)

 * @version {String, String}
 *   String value: The value to convert
 *   String type: The radix type to use (2 - 256)
 */
toString;

/** [Main Function]
 * Converts a radix into a value (such as 0x17 -> 23)
 * @return {Number}

 * @main
 * @version {String, Number, Boolean}
 *   String value: The value to convert
 *   Number type: The radix type to use (2 - 256)
 *   Boolean compress: Force radix 256

 * @version {String}
 *   String value: The value to convert

 * @version {String, Any}
 *   String value: The value to convert
 *   Any type: A possible radix type, and/or decompression boolean

 * @version {String, Boolean}
 *   String value: The value to convert
 *   Boolean decompress: Force radix 256

 * @version {String, Number}
 *   String value: The value to convert
 *   Number type: The radix type to use (2 - 256)

 * @version {String, String}
 *   String value: The value toconvert
 *   String characters: The characters to use as the radii
 */
toNumber;

/** [Main Function]
 * Convert a number into a Greek/Roman number
 * @version {Number}
 *   Number number: The number to convert
 */
toLetter;

Encode.CRA1   = Decode.CRA1   = crazy;
Encode.CRA2   = Decode.CRA2   = crazier;
Encode.INTW   = Decode.INTW   = intwined;
Encode.UNIX   = Decode.UNIX   = UNIX;
Encode.UUENC  = Decode.UUENC  = UUENC;
Encode.XXENC  = Decode.XXENC  = XXENC;
Encode.BINHEX = Decode.BINHEX = BINHEX;

for(var i = 0, j = "Password toString toNumber toLetter MAC MAS Encode Decode Random encodeBase10 decodeBase10 encodeBase20 decodeBase20 encodeBase30 decodeBase30 B64 B1024 B2048".split " "; i < j.length; i++)
  $win[j[i]] = eval(j[i]);
